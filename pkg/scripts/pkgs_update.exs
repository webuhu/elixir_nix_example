Mix.install([:castore])

defmodule PkgsUpdate do
  @moduledoc """
  Updates the local pkg/_pkgs.nix file with pin to the latest Nix packages on Github.
  """

  @nix_pkg_download_url "https://github.com/NixOS/nixpkgs/archive"
  @github_channel "nixpkgs-unstable"

  @doc """
  Run the pkg/_pkgs.nix update generation.
  """
  def run() do
    commit_sha =
      github_api_request(github_api_url())
      |> get_latest_commit_sha()

    write_pkgs_file(commit_sha)

    IO.puts(IO.ANSI.format([:green, "Done."]))
  end

  defp github_api_url() do
    "https://api.github.com/repos/NixOS/nixpkgs/commits?sha=#{@github_channel}"
  end

  @spec github_api_request(binary()) :: charlist()
  defp github_api_request(github_api_url) do
    url = String.to_charlist(github_api_url)

    {:ok, _} = Application.ensure_all_started(:inets)
    {:ok, _} = Application.ensure_all_started(:ssl)

    # https://erlef.github.io/security-wg/secure_coding_and_deployment_hardening/inets
    cacertfile = CAStore.file_path() |> String.to_charlist()

    http_options = [
      ssl: [
        verify: :verify_peer,
        cacertfile: cacertfile,
        depth: 2,
        customize_hostname_check: [
          match_fun: :public_key.pkix_verify_hostname_match_fun(:https)
        ]
      ]
    ]

    user_agent = {'User-Agent', 'httpc'}
    options = [body_format: :binary]

    case :httpc.request(:get, {url, [user_agent]}, http_options, options) do
      {:ok, {{_, 200, _}, _headers, body}} ->
        body

      other ->
        raise "couldn't fetch #{url}: #{inspect(other)}"
    end
  end

  @spec get_latest_commit_sha(binary()) :: binary()
  defp get_latest_commit_sha(contents) do
    commit_sha_list =
      for {start, _end} <- :binary.matches(contents, "\"sha\":") do
        # Build the lookup scope from after the key until the end of the binary
        scope_start = start + 6
        scope_end = byte_size(contents) - scope_start

        # Find the next quote
        {start, _} = :binary.match(contents, "\"", scope: {scope_start, scope_end})

        # Extract SHA which is always 40 bytes
        :binary.part(contents, start + 1, 40)
      end

    List.first(commit_sha_list)
  end

  @spec write_pkgs_file(binary()) :: :ok
  defp write_pkgs_file(commit_sha) do
    date = Date.utc_today()

    # nix derivation
    update = """
    # generated by pkgs_update.exs (#{date})
    import(fetchTarball {
      name = "#{@github_channel}_#{date}";
      url = "#{@nix_pkg_download_url}/#{commit_sha}.tar.gz";
    }) {}
    """

    # overwrite derivation
    File.write!("pkg/_pkgs.nix", update, [:write])
  end
end

PkgsUpdate.run()
